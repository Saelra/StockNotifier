			export const fetchStockAggregate = async (stockSymbol: string, timeSpan: string, incrementAmount: number, incrementMultiplier: number = 1): Promise<[number[], string[], number[], number[]]> => {

(1)		const lowerCaseTimeSpan = timeSpan.toLowerCase().trim();
(2)		let stockAggregate: number[] = [];
(3)		let dateAggregate: string[] = [];
(4)		let transactionAggregate: number[] = [];
(5)		let volumeAggregate: number[] = [];

(6)		if (!validTimeSpans.includes(lowerCaseTimeSpan)) {

(7)			console.error("Not a valid time span. Please use 'minute', 'hour', 'day', 'week', 'month', or 'year'");
(8)			return [stockAggregate, dateAggregate, transactionAggregate, volumeAggregate]
			}
(9)		const startingDate = new Date();

(10)	switch (lowerCaseTimeSpan) {

(11)		case "day":
(12)			startingDate.setDate(startingDate.getDate() - incrementAmount);
(13)			break;

(14)		case "week":
(15)			startingDate.setDate(startingDate.getDate() - (7 * incrementAmount));
(16)			break;

(17)		case "month":
(18)			startingDate.setMonth(startingDate.getMonth() - incrementAmount);
(19)			break;

(20)		case "year":
(21)			startingDate.setFullYear(startingDate.getFullYear() - incrementAmount);
(22)			break;
			}
(23)	try {

(24)		const data = await rest.stocks.aggregates(stockSymbol, incrementMultiplier, lowerCaseTimeSpan, formatDate(startingDate), formatDate(new Date()), { sort: 'asc' });
(25)		console.log("Data object returned by fetchStockAggregate(): " + data);

(26)		if (data.results) {

(27)			stockAggregate = data.results.filter(result => result.c !== undefined).map(result => result.c as number);
(28)			dateAggregate = data.results.filter(result => result.t !== undefined).map(result => formatDate(new Date(result.t as number * 1000)));
(29)			transactionAggregate = data.results.filter(result => result.n !== undefined).map(result => result.n as number);Retrieve stock volumes
(30)			volumeAggregate = data.results.filter(result => result.v !== undefined).map(result => result.v as number);
				}
(31)	} catch (e) {

(32)		console.error(e);
			}
(33)	return [stockAggregate, dateAggregate, transactionAggregate, volumeAggregate]
			};